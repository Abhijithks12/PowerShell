
1.Add multiple users to multiple ad groups,

Create a csv like below,

user2multipleadgroups.csv

Username,groupname

user1,group1

Script :

import-csv C:\Temp\user2multipleadgroups.csv | ForEach-Object {Add-ADGroupMember -Identity $_.Groupname -Members $_.Username}

=======================================

 

2.Compare ad group membership of 2 users


Script :

$FirstUser = Read-Host "sxsds"

$SecondUser = Read-Host "rsdjsa"




$FirstUGM = (get-aduser $firstuser -Properties memberof).memberof

$SecondUGM = (get-aduser $SecondUser -Properties memberof).memberof




foreach ($F in $FirstUGM)

{

    $FGroupName = (get-adobject $F).name

    $Matched = $False

    foreach ($S in $SecondUGM)

    {

        $SGroupName = (get-adobject $S).name

        if ($FGroupName -eq $SGroupName){$Matched = $True;break}

    }

    if ($Matched -eq $False){write-host "$SecondUser is not a member of $FGroupName"}

}

==================================================

3.To get computer sid ,id 


Command:

 Get-adcomputer -id "EXXSASASA"

 

===================================================

 

4.To delete computer objects from list

Script :

$File = "c:\temp\todelete.txt"




ForEach ($Computer in (Get-Content $File))

{   Try {

        Remove-ADComputer $Computer -ErrorAction Stop

        Add-Content c:\Scripts\remove-mycomputers.log -Value "$Computer removed"

    }

    Catch {

        Add-Content c:\Scripts\remove-mycomputers.log -Value "$Computer not found because $($Error[0])"

    }

}




=====================================================

 

5.Create ad group in an OU with description


Script :

New-ADGroup -Name "gROUP NAME" -GroupCategory Security -GroupScope Global -Path "OU=XX,OU=XX,OU=XX,OU=XX,DC=XX,DC=XX,DC=XX" -Description "649821752704 - nca-advertising-prod-amap-nct-readonly"

===================================================

 

6.Set time on a Computer

Set-TimeZone -id "AUS Eastern Standard Time" -passthru

To view time zone

get-timezone

=====================================================

7.Create new contact

New-ADObject -Type contact -name Sanatsatish.Shiarma -Path "OU=Contacts,OU=Users,OU=Us,DC=news,DC=nd,DC=lc"

 

=====================================================

 

8.To get vm ware tools version Power cli

 

get-vm | % { get-view $_.id } | select Name, @{ Name="ToolsVersion"; Expression={$_.config.tools.toolsVersion}},@{ Name="ToolStatus"; Expression={$_.Guest.ToolsVersionStatus}},@{N="Configured OS";E={$_.Config.GuestFullName}}| Export-CSV "e:\abhijith\vmware tools\vmc27.csv"

====================================================

 

9.Check Uptime of servers

Script :

$servers = "ser1","ser1","ser1","ser1","ser1","ser1"

$currentdate = Get-Date

foreach($server in $servers){

$Bootuptime = (Get-CimInstance -ClassName Win32_OperatingSystem -ComputerName $server).LastBootUpTime

   $uptime = $currentdate - $Bootuptime

   Write-Output "$server Uptime : $($uptime.Days) Days, $($uptime.Hours) Hours, $($uptime.Minutes) Minutes"

}

 

OR

 

function get-uptime {
param(
$computername =$env:computername
)
$osname = Get-WmiObject win32_operatingsystem -ComputerName $computername -ea silentlycontinue
if($osname)
{
$lastbootuptime =$osname.ConvertTodateTime($osname.LastBootUpTime)
$LocalDateTime =$osname.ConvertTodateTime($osname.LocalDateTime)
$up =$LocalDateTime - $lastbootuptime
$uptime ="$($up.Days) days, $($up.Hours)h, $($up.Minutes)mins"
$output =new-object psobject
$output |Add-Member noteproperty LastBootUptime $LastBootuptime
$output |Add-Member noteproperty ComputerName $computername
$output |Add-Member noteproperty uptime $uptime
$output | Select-Object computername,LastBootuptime,Uptime
}
else
{
$output =New-Object psobject
$output =new-object psobject
$output |Add-Member noteproperty LastBootUptime "Not Available"
$output |Add-Member noteproperty ComputerName $computername
$output |Add-Member noteproperty uptime "Not Available"
$output | Select-Object computername,LastBootUptime,Uptime
}
}
get-uptime
$multiplemachines =@()
$allserver =Get-Content -Path "C:\Temp\PSSCRIPTS\serveruptime.txt"
foreach($oneserver in $allserver)
{
$multiplemachines += get-uptime $oneserver
}
$multiplemachines |ft -AutoSize

========================================================

 

10.To get ad group members with email and username


Script :

Get-ADGroupMember -Identity 'adgroup' -Recursive |

Select-Object -Unique |

Get-ADUser -Properties Mail |

Select-Object Name, Mail |

Export-Csv -Path 'E:\abhijith\adgroup' -NoTypeInformation

 

===========================================================

 

11.To view installed roles and features 


Import-module servermanager ; Get-WindowsFeature | where-object {$_.Installed -eq $True} |format-list DisplayName

 

============================================================

 

12.View members of Domain local AD group.




$s = "LDAP://" + (Get-ADGroup "adgroup").DistinguishedName

([ADSI]$s).member

==========================================================

 

13.To get list of installed apps on a server 

 

Get-WmiObject -Class Win32_Product -computername "srver01" | select-object __server, name, version -erroraction silentlycontinue

 

==============================================================

 

14.View ad group membership of user

 

Get-ADPrincipalGroupMembership -Identity usrc| Format-Table -Property name

 

============================================================

 

 15.To get the SAM account name for an AD group members

 

Get-ADGroupMember -Identity 'adgroup' | Select-Object name,Samaccountname

 

=============================================================

 

16.To get count of ad group




$users =get-adgroupmember -identity 'Radgroupional CI'

$users.count

 

===========================================================

 

17.DL email addition


Script :

ForEach ($item in (Import-CSV C:\Scripts\DLMembers1.csv)) {

  $email = $item.'Email' #whatever your field name

  Get-ADUser -Filter "mail -eq '$email'" | 

  % { Add-ADGroupMember -Identity "adgroup" -Members $_ }

}

=========================================================

 

18.To get ad group members list




Get-AdGroupMember -identity "adgroup" | Select-Object name

 

5000 members

 

$users = Get-ADGroupMember -Identity ‘gapps_s3’

$users | ft name

=========================================================

19.View Unix attributes of a user

get-aduser sivadasa  -properties * | select-object Name, SAMaccountName, EmailAddress,Enabled,WhenCreated,uidnumber,uid,gidnumber,loginshell,Unixhomedirectory

 

========================================================

20. View a specific software version on remote computer 

 

Get-WmiObject -Class Win32_Product -Computer server01 | Where-Object { $_.Name -like "vmware tools" }

===========================================================
21. View a specific software version on a list of  remote computer 


$pcnames = Import-Csv -Path "C:\temp\psscripts\swversiononservers.csv"
$pcnames = $pcnames.ComputerName
foreach ($pcname in $pcnames){
$pcname;
Get-WmiObject Win32_Product -ComputerName $pcname | Where-Object { $_.Name -like "vmware tools" } | Format-List -Property PSComputerName, Name, version
}

=====================================================

22. User email to sam account name

 

Get-Content "C:\temp\psscripts\usersemailinput.txt" | ForEach-Object {
$mail = $_
$user = Get-ADUser -LDAPFilter "(mail=$mail)"
if ( $user ) {
$sAMAccountName = $user.sAMAccountName
}
else {
$sAMAccountName = $null
}
[PSCustomObject] @{
"mail" = $mail
"sAMAccountName" = $sAMAccountName
}
}

===========================================================
23. Set DNS server in DHCP scope options (Option 006)

 

Set-DhcpServerv4OptionValue -ComputerName dhcpserver01 -ScopeId 10.xx.xx.xx -DnsServer 10.xx.xx.xx,10.xx.xx.xx

===========================================================

24. To check last password of a user

get-aduser -identity sivadasa -properties passwordlastset | ft Name, passwordlastset

==============================================================

24. To check disk space of servers with percentage.

 

Change the $exportpath to whatever path you want the html and CSV files in.
$exportPath = "C:\Temp\PSSCRIPTS" # I change this to a central fileshare

Your computers.txt will need to be in this folder.
$computers = Get-Content "C:\Temp\PSSCRIPTS\drive_info_computers.txt"
$driveinfo = Get-WMIobject win32_LogicalDisk -ComputerName $computers -filter "DriveType=3" |
Select-Object SystemName, DeviceID, VolumeName,
@{Name="Size(GB)"; Expression={"{0:N1}" -f($.size/1gb)}},
@{Name="FreeSpace(GB)"; Expression={"{0:N1}" -f($.freespace/1gb)}},
@{Name="% FreeSpace(GB)"; Expression={"{0:N2}%" -f(($.freespace/$.size)*100)}},
@{Name="Date"; Expression={$(Get-Date -format 'g')}}

Various Output Options
$driveinfo | Out-GridView
$driveinfo | Format-Table -AutoSize
$driveinfo | Export-Csv "$exportPath\Server_Drivespace.csv" -NoTypeInformation -NoClobber -Append
$driveinfo | ConvertTo-HTML -head $style | Out-File $exportPath\Server_Drivespace.htm -NoClobber -Append

 

===================================


25.script to get sam account name ,

step: 1

Get-ADGroupMember -Identity 'adgroup' | Select-Object name,Samaccountname |
Export-Csv E:\abhijith\scriptop\adgroup.csv

============================================================

26.step: 2

Copy the sam account name from "E:\abhijith\scriptop\adgroup.csv" to E:\Abhijith\scriptop\saminput.txt

=============================================================

27.script to get Job tittle of users from the sam account input

step: 3

$user = Get-Content E:\Abhijith\scriptop\saminput.txt

$r= foreach($u in $user){

Get-ADUser -Identity $u -Properties * | select Name,Title

}

$r | Export-csv E:\abhijith\scriptop\adgroup.csv -UseCulture -NoTypeInformation

================================================
28. Get ad groups names starts with 

Get-ADGroup -Filter {Name -like 'rgrp_power*'}  -Properties * | select -property name,info


=================================================

29.Add Notes to an AD group

$group = Get-AdGroup -Identity "RgegsGROUP" -Properties info
$notes = $group.info
$notes += "Do not include this group when cloning user group memberships."
Set-AdGroup $group -Replace @{info = $notes}
==================================================

30. To check installed patches on remote servers

Param(
$Computername = (Get-Content -path "C:\temp\psscripts\diskclear.txt"))
foreach($Computer in $ComputerName){

Get-HotFix -ErrorAction SilentlyContinue | Ft -AutoSize
} 

=============================================

get-scomalert | where-object { $_.name  -eq 'disk free space is low' -and $_.ResolutionState -eq “0”  } | Select-Object PrincipalName | Out-File 'C:\temp\PSSCRIPTS\DiskAlertsList.txt'


======================================


1

There are many ways to solve this problem. One way is to load both files into variables, then use the String.Replace() Method to replace **** COPY DATA HERE **** from the 2nd file by the content of the 1st file. Save the variable that contains the merged content to a new file or overwrite the existing file.

In the following code I've opted to create a new file "merged.txt".

# Load file text1.txt into variable $text1
$text1 = Get-Content text1.txt -Raw

# Load file text2.txt into variable $text2
$text2 = Get-Content text2.txt -Raw

# Replace the given text in $text2 by $text1
$text2 = $text2.Replace('**** COPY DATA HERE ****', $text1)

# Save the variable $text2 into file merged.txt
$text2 | Set-Content merged.txt
Example:

Given that "text1.txt" contains:

This is the text 
to be copied into the 2nd file.
and "text2.txt" contains:

existing data
**** COPY DATA HERE ****
more existing data
After running the above script, "merged.txt" will be:

existing data
This is the text 
to be copied into the 2nd file.
more existing data
Notes:

The Get-Content parameter -Raw is used to load both files as a single, multiline string, so the .Replace() method can work on the whole text. By default Get-Content would split the text into individual lines, so the variables would be arrays of strings. While this can be useful, it is not really necessary in this case, so I disabled this behaviour by passing -Raw.
While the above script works for simple text files, you also mentioned YAML files. In this case matters are more complicated, because the inserted data has to match the indentation of the insert position. It would be hard to give a correct solution for all possible cases. If you need assistance for YAML files I suggest you provide sample input and expected output.
==================================================


Get-Content in.txt | Where-Object { $_ -match "started processing" -or $_ -match "file" } >> out.txt

===============================================


Get alerts from scom with all properties

get-scomalert | where-object {​ $_.name-eq 'disk free space is low' -and $_.ResolutionState -eq “0”}​ |fl *

=========================================================

Get certificate scom alerts,
'
 $inputScomMS = 'scomprod01.news.newslimited.local'
Import-Module -Name "OperationsManager"
New-SCManagementGroupConnection -ComputerName $inputScomMS
get-scomalert | where-object { $_.name  -eq 'Certificate lifespan alert' -and $_.ResolutionState -eq “0”   }| Select-Object PrincipalName,Description | Out-File c:\temp\abhi\certalerts.txt

======================================


find ou

Get-Content c:\temp\psscripts\servicereboot.txt | ForEach-Object {Get-ADComputer $_} | select DistinguishedName

=====================================
$inputScomMS = 'scommgtserver01.domain.in'
Import-Module -Name "OperationsManager"

$server = 'testserver1.domain.in'

$instance = (get-scomclass -DisplayName “Windows Computer” |Get-SCOMClassInstance | ? { $_.DisplayName -eq $server } )

# Set time for 6 minutes

$Time = (Get-Date).addMinutes(30)

Start-SCOMMaintenanceMode -Instance $Instance -EndTime $Time -Comment “Starting Maintenance Mode.” -Reason “PlannedOther”

====================================
52. Get SAMACCOUNT name from display name for a group of users

# Specify the path to the input text file containing display names
$inputFilePath = "C:\Temp\PSSCRIPTS\dadisplayname.txt"

# Specify the path to the output text file to store the SAM account names
$outputFilePath = "C:\Temp\PSSCRIPTS\dasam.txt"

# Read the contents of the input file (each line represents a display name)
$displayNames = Get-Content -Path $inputFilePath

# Initialize an empty array to store the results
$results = @()

# Iterate over each display name
foreach ($displayName in $displayNames) {
    # Retrieve the SAM account name for the current display name
    $user = Get-ADUser -Filter {DisplayName -eq $displayName} -Properties sAMAccountName

    # Check if the user is found
    if ($user) {
        $samAccountName = $user.sAMAccountName
        $result = [PSCustomObject]@{
            DisplayName = $displayName
            SAMAccountName = $samAccountName
        }
        $results += $result
    } else {
        Write-Host "User with display name '$displayName' not found."
    }
}

# Export the results to the output file
$results | Export-Csv -Path $outputFilePath -NoTypeInformation

Write-Host "Output exported to $outputFilePath."

================================================
# Specify the display name for which you want to retrieve the SAM account name
$displayName = "Adm_Mikael Nedegard"

# Retrieve the SAM account name for the given display name
$user = Get-ADUser -Filter {DisplayName -eq $displayName} -Properties sAMAccountName

# Check if the user is found
if ($user) {
    $samAccountName = $user.sAMAccountName
    Write-Host "SAM Account Name for '$displayName': $samAccountName"
} else {
    Write-Host "User with display name '$displayName' not found."
}

===================================

Test this.. 
# Define the list of users to remove
$usersToRemove = @("User1", "User2", "User3")

# Define the list of groups to remove the users from
$groupsToRemoveFrom = @("Group1", "Group2", "Group3")

# Iterate over each user
foreach ($user in $usersToRemove) {
    # Iterate over each group
    foreach ($group in $groupsToRemoveFrom) {
        # Remove the user from the group
        Remove-ADGroupMember -Identity $group -Members $user -Confirm:$false
        Write-Host "Removed user $user from group $group"
    }
}

Abhijith Sivadas, 30 min

# Specify the path to the input text file
$inputFilePath = "C:\Path\to\InputFile.txt"

# Read the contents of the input file
$inputContent = Get-Content -Path $inputFilePath

# Iterate over each line in the input file
foreach ($line in $inputContent) {
    # Split the line into user and group using a delimiter (e.g., comma or tab)
    $user, $group = $line -split ","

    # Remove the user from the group
    Remove-ADGroupMember -Identity $group.Trim() -Members $user.Trim() -Confirm:$false
    Write-Host "Removed user $user from group $group"
}
==================================

To find disabled date

Username = "dareddym4" # Replace with the username you want to check

$User = Get-ADUser -Identity $Username -Properties whenChanged

if ($User.Enabled -eq $false) {
    $DisabledDate = $User.whenChanged
    Write-Host "The account '$Username' was disabled on $DisabledDate."
} else {
    Write-Host "The account '$Username' is currently enabled."
}

=================================

Convert csv to html and send mail

# Define email parameters
$smtpServer = "smtp.news.newslimited.local"
$fromEmail = "abhijith.sivadas@news.com.au"
$toEmail = "abhijith.sivadas@news.com.au"
$subject = "High Uptime Servers"

# CSV file path
$csvFilePath = "C:\Users\dasivadasa\Downloads\book2.csv"

# Convert CSV to HTML table
$csvData = Import-Csv -Path $csvFilePath
$htmlTable = $csvData | ConvertTo-Html -Fragment

# Create email body with HTML table content
$body = @"
<html>
<head>
<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: lightgray;
    }
</style>
</head>
<body>
<h2>CSV to HTML Conversion</h2>
$htmlTable
</body>
</html>
"@

# Create email message
$mailParams = @{
    SmtpServer = $smtpServer
    From = $fromEmail
    To = $toEmail
    Subject = $subject
    Body = $body
    BodyAsHtml = $true
}

# Send email
Send-MailMessage @mailParams

==================================














